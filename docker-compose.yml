version: '3.8'

services:
  db:
    image: postgis/postgis:16-3.4
    container_name: ishm-db
    environment:
      POSTGRES_DB: ishm
      POSTGRES_USER: ishm
      POSTGRES_PASSWORD: ishm
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # This line is correct for your project structure:
      - ./schema/schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ishm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ishm"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ishm-app
    environment:
      DB_URL: jdbc:postgresql://db:5432/ishm
      DB_USER: ishm
      DB_PASSWORD: ishm
      MICRONAUT_ENVIRONMENTS: docker
      JAVA_OPTS: "-Xmx768m -Xms512m"
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ishm-network
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: ishm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - app
    networks:
      - ishm-network
    restart: unless-stopped
    profiles:
      - production

  # Redis cache (optional, for session/cache management)
  redis:
    image: redis:7-alpine
    container_name: ishm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ishm-network
    restart: unless-stopped
    profiles:
      - production
    command: redis-server --appendonly yes

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ishm-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@soilhealth.gov.in
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ishm-network
    restart: unless-stopped
    profiles:
      - development

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ishm-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ishm-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ishm-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ishm-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  ishm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local